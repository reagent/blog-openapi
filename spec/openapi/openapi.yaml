openapi: 3.0.0
info:
  title: Blog API
  version: 2024-02-22
  description: API service to manage blog posts
  contact:
    email: user@host.example
tags:
  - name: post
paths:
  /posts:
    get:
      tags:
        - post
      operationId: post-list
      description: List all posts available
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - post
      operationId: post-create
      description: Create a new post
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                post:
                  $ref: '#/components/schemas/PostCreate'
              required:
                - post
  /posts/{id}:
    get:
      tags:
        - post
      operationId: post-fetch
      description: Fetch a single post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - post
      operationId: post-update
      description: Update existing post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                post:
                  $ref: '#/components/schemas/PostUpdate'
    delete:
      tags:
        - post
      operationId: post-destroy
      description: Destroy existing post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}/publish:
    patch:
      tags:
        - post
      operationId: post-publish
      description: Set publish date of post to now
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}/unpublish:
    patch:
      tags:
        - post
      operationId: post-unpublish
      description: Unset publish date of post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
security:
  - BasicAuth: []
  - BearerAuth: []
components:
  schemas:
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    ID:
      type: integer
      format: int32
    Post:
      type: object
      required:
        - id
        - title
        - body
        - published_at
      properties:
        id:
          $ref: '#/components/schemas/ID'
        title:
          type: string
        body:
          type: string
        published_at:
          type: string
          format: date-time
          nullable: true
    PostCreate:
      type: object
      required:
        - title
        - body
      properties:
        title:
          type: string
        body:
          type: string
    PostUpdate:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
    Posts:
      type: object
      required:
        - total
        - posts
      properties:
        total:
          type: integer
          format: int32
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
servers:
  - url: http://localhost:3000
    description: Localhost
    variables: {}
